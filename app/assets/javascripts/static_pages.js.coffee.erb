# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$ ->
  maps = {}
  myLatlon = null
  directionDisplays = {}
  directionsService = new google.maps.DirectionsService()

  isMobile =
    Android: ->
      /Android/i.test navigator.userAgent
    iOS: ->
      /iPhone|iPad|iPod/i.test navigator.userAgent

  calculateCalories = (distance, c) ->
    Math.round(gon.weight * c * (distance * 1.0 / 1600))

  showPosition = (position) ->
    myLatlon = new google.maps.LatLng(position.coords.latitude, position.coords.longitude)

    $('.map-canvas').each (i, c) ->
      outer = $(c).parents('.event')
      id = $(outer).data('id')

      latlon = new google.maps.LatLng(gon.events[id].lat, gon.events[id].lon)

      if isMobile.iOS() || isMobile.Android()
        outer.find('.ubering_link a').attr('href', 'uber://?action=setPickup&pickup=my_location')

      request =
        origin: myLatlon
        destination: latlon
        travelMode: google.maps.TravelMode.WALKING
        avoidHighways: true

      bike_request =
        origin: myLatlon
        destination: latlon
        travelMode: google.maps.TravelMode.BICYCLING
        avoidHighways: true

      drive_request =
        origin: myLatlon
        destination: latlon
        travelMode: google.maps.TravelMode.DRIVING
        avoidHighways: true

      directionsService.route bike_request, (result, status) ->
        duration = result.routes[0].legs[0].duration.value
        length = result.routes[0].legs[0].distance.value
        outer.find('.biking_eta').text(formatDate(timeAfter(duration * 1.0 / 60)))
        if gon.has_fitbit
          outer.find('.biking_link a').attr('href', 'http://localhost:3000/log?activity=biking&duration=' + duration + '&distance=' + length + '&calories=' + calculateCalories(length, 0.28))
        outer.find('.biking_exp').text(calculateCalories(length, 0.28) + ' cal')

      directionsService.route drive_request, (result, status) ->
        duration = result.routes[0].legs[0].duration.value

        $.ajax
          url: "/uber/delegate?url=" + encodeURIComponent("https://api.uber.com/v1/estimates/time?start_latitude=" + latlon.lat() + "&start_longitude=" + latlon.lng())
          type: 'GET'
          success: (data, status, xhr) ->
            uber_eta = null
            $(data.times).each (i, t) ->
              if t['display_name'] == 'uberX'
                uber_eta = t['estimate']
            outer.find('.ubering_eta').text(formatDate(timeAfter((duration + uber_eta) * 1.0 / 60)))

        $.ajax
          url: "/uber/delegate?url=" + encodeURIComponent("https://api.uber.com/v1/estimates/price?start_latitude=" + myLatlon.lat() + "&start_longitude=" + myLatlon.lng() + "&end_latitude=" + latlon.lat() + "&end_longitude=" + latlon.lng())
          type: 'GET'
          success: (data, status, xhr) ->
            low = null
            high = null
            console.log data
            $(data.prices).each (i, t) ->
              if t['display_name'] == 'uberX'
                low = parseFloat(t['low_estimate'])
                high = parseFloat(t['high_estimate'])
            outer.find('.ubering_exp').text('$' + (low + high) / 2)

      directionsService.route request, (result, status) ->
        duration = result.routes[0].legs[0].duration.value
        length = result.routes[0].legs[0].distance.value
        outer.find('.walking_exp').text(calculateCalories(length, 0.53) + ' cal')
        if gon.has_fitbit
          outer.find('.walking_link a').attr('href', 'http://localhost:3000/log?activity=walking&duration=' + duration + '&distance=' + length + '&calories=' + calculateCalories(length, 0.53))
        directionDisplays[id].setDirections result if status is google.maps.DirectionsStatus.OK

      getWalkingETA()
      setPercentages()

  getLocation = ->
    if navigator.geolocation
      navigator.geolocation.getCurrentPosition showPosition
    else
      console.log 'Upgrade browser!! '

  initializeMap = ->
    $('.map-canvas').each (i, c) ->
      outer = $(c).parents('.event')
      id = $(outer).data('id')

      $(c).css('height', $(c).css('width'))

      latlon = new google.maps.LatLng(gon.events[id].lat, gon.events[id].lat)
      maps[id] = new google.maps.Map(c)
      directionDisplays[id] = new google.maps.DirectionsRenderer()
      directionDisplays[id].setMap maps[id]

      circles = gon.events[id].router_points
      $(circles).each (i, c) ->
        options =
          strokeColor: '#255AA7',
          strokeOpacity: 0,
          strokeWeight: 2,
          fillColor: '#ED2626',
          fillOpacity: 0.2 + 2 * c[2],
          map: maps[id],
          center: new google.maps.LatLng(c[0], c[1]),
          radius: 10 + 100 * c[2]

        new google.maps.Circle(options)

  display_email = (ev) ->
    $(ev.target).parents('.event').find('.email_overlay').show()

  initializeLinks = ->
    $('.title a').click(display_email)

    $('.email_overlay').click ->
      $('.email_overlay').hide()

  getDistance = (from, to) ->
    dlat = 111.321 * (to.lat() - from.lat())
    console.og
    dlng = 85 * (to.lng() - from.lng())
    return Math.sqrt(dlat * dlat + dlng * dlng)

  formatTime = (time) ->
    min = parseInt(time)
    sec = parseInt((time - min) * 60)
    return min + ':' + sec

  formatDate = (d) ->
    hr = d.getHours()
    min = d.getMinutes()
    min = "0" + min  if min < 10
    ampm = (if hr < 12 then "AM" else "PM")
    hr = hr % 12
    hr = 12 if hr == 0
    hr + ":" + min + " " + ampm

  timeAfter = (time) ->
    current = new Date()
    then_time = new Date(current.getTime() + time * 60000)
    return then_time

  getWalkingETA = ->
    $('.map-canvas').each (i, c) ->
      outer = $(c).parents('.event')
      id = $(outer).data('id')

      latlon = new google.maps.LatLng(gon.events[id].lat, gon.events[id].lon)
      distance = getDistance(myLatlon, latlon)
      time = distance * 12.5
      outer.find('.walking_eta').text(formatDate(timeAfter(time)))
      gon.events[id].walking_time = time

  setPercentages = ->
    $('.map-canvas').each (i, c) ->
      outer = $(c).parents('.event')
      id = $(outer).data('id')

      return if gon.events[id].claimed

      current = new Date()
      emailTime = new Date(gon.events[id].email_time * 1000)
      diff = current.getTime() - emailTime.getTime()
      predictedTime = diff / 60000 + gon.events[id].walking_time
      chance = Math.pow(Math.E, -gon.events[id].predators/400 * (predictedTime-1)) * 100
      chance = Math.min(chance,99.99)
      outer.find('.percentage_bar').css('width', chance + '%')
      outer.find('.percentage').text(Math.round(chance*100)/100)

  initializeLinks()
  initializeMap()
  getLocation()
